# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-11-22 07:11
from __future__ import unicode_literals

from django.core.management.sql import emit_post_migrate_signal

from django.db import migrations


def remove_duplicate_permission_code_name(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes.ContentType')
    content_type = ContentType.objects.get(app_label="base", model="learningunitcomponent")
    Permission.objects.filter(codename='can_access_learningunit', content_type=content_type)\
                      .delete()

def add_central_manager_group(apps, schema_editor):
    # create group
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(2, False, db_alias)
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    central_managers_group, created = Group.objects.get_or_create(name='central_managers')
    if created:
        # Learning unit
        can_access_learningunit = Permission.objects.get(codename='can_access_learningunit')
        central_managers_group.permissions.add(can_access_learningunit)
        can_edit_learningunit_specification = Permission.objects.get(codename='can_edit_learningunit_specification')
        central_managers_group.permissions.add(can_edit_learningunit_specification)
        can_change_learningcomponentyear = Permission.objects.get(codename='change_learningcomponentyear')
        central_managers_group.permissions.add(can_change_learningcomponentyear)
        can_edit_learningunit_pedagogy = Permission.objects.get(codename='can_edit_learningunit_pedagogy')
        central_managers_group.permissions.add(can_edit_learningunit_pedagogy)
        change_learningclassyear = Permission.objects.get(codename='change_learningclassyear')
        central_managers_group.permissions.add(change_learningclassyear)
        can_create_learningunit = Permission.objects.get(codename='can_create_learningunit')
        central_managers_group.permissions.add(can_create_learningunit)
        # Offer
        can_access_offer = Permission.objects.get(codename='can_access_offer')
        central_managers_group.permissions.add(can_access_offer)


def add_faculty_manager_group(apps, schema_editor):
    # create group
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(2, False, db_alias)
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    faculty_managers_group, created = Group.objects.get_or_create(name='faculty_managers')
    if created:
        # Learning unit
        can_access_learningunit = Permission.objects.get(codename='can_access_learningunit')
        faculty_managers_group.permissions.add(can_access_learningunit)
        can_edit_learningunit_specification = Permission.objects.get(codename='can_edit_learningunit_specification')
        faculty_managers_group.permissions.add(can_edit_learningunit_specification)
        can_change_learningcomponentyear = Permission.objects.get(codename='change_learningcomponentyear')
        faculty_managers_group.permissions.add(can_change_learningcomponentyear)
        can_edit_learningunit_pedagogy = Permission.objects.get(codename='can_edit_learningunit_pedagogy')
        faculty_managers_group.permissions.add(can_edit_learningunit_pedagogy)
        change_learningclassyear = Permission.objects.get(codename='change_learningclassyear')
        faculty_managers_group.permissions.add(change_learningclassyear)
        # Offer
        can_access_offer = Permission.objects.get(codename='can_access_offer')
        faculty_managers_group.permissions.add(can_access_offer)


class Migration(migrations.Migration):
    dependencies = [
        ('base', '0190_auto_20171122_0929'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_permission_code_name),
        migrations.RunPython(add_central_manager_group),
        migrations.RunPython(add_faculty_manager_group),
    ]